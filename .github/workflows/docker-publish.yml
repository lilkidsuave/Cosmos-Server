name: Build and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - unstable

jobs:
  build:
    name: Build and Publish on amd64
    runs-on: ubuntu-20.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        run: docker buildx create --use

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash curl

      - name: Download and Install Go
        run: |
          wget https://golang.org/dl/go1.21.6.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz

      - name: Set Go Environment
        run: echo 'export PATH=$PATH:/usr/local/go/bin' >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install npm dependencies
        run: npm install

      - name: Download GeoLite2-Country database
        run: |
          curl -s -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAX_TOKEN&suffix=tar.gz" -o GeoLite2-Country.tar.gz
          tar -xzf GeoLite2-Country.tar.gz --strip-components 1 --wildcards "*.mmdb"

      - name: Download and Extract Nebula Binary (AMD64)
        run: |
          curl -LO https://github.com/slackhq/nebula/releases/download/v1.7.2/nebula-linux-amd64.tar.gz
          tar -xzvf nebula-linux-amd64.tar.gz
          mv nebula nebula-amd
          mv nebula-cert nebula-amd-cert

      - name: Build UI
        run: npm run client-build

      - name: Build Docker Image
        run: docker build -t docker.pkg.github.com/${{ github.repository_owner }}/${{ github.repository }}/my-image:latest .
        
      - name: Docker Login to GitHub Packages
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.repository_owner }} --password-stdin

      - name: Push Docker Image to GitHub Packages
        run: docker push docker.pkg.github.com/${{ github.repository_owner }}/${{ github.repository }}/my-image:latest

  build-arm:
    name: Build and Publish on ARM
    runs-on: ubuntu-20.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash curl

      - name: Download and Install Go (ARM64)
        run: |
          wget https://golang.org/dl/go1.21.6.linux-arm64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.21.6.linux-arm64.tar.gz

      - name: Set Go Environment
        run: echo 'export PATH=$PATH:/usr/local/go/bin' >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install npm dependencies
        run: npm install

      - name: Download GeoLite2-Country database
        run: |
          curl -s -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAX_TOKEN&suffix=tar.gz" -o GeoLite2-Country.tar.gz
          tar -xzf GeoLite2-Country.tar.gz --strip-components 1 --wildcards "*.mmdb"

      - name: Download and Extract Nebula Binary (ARM64)
        run: |
          curl -LO https://github.com/slackhq/nebula/releases/download/v1.7.2/nebula-linux-arm64.tar.gz
          tar -xzvf nebula-linux-arm64.tar.gz
          mv nebula nebula-arm
          mv nebula-cert nebula-arm-cert

      - name: Build UI
        run: npm run client-build

      - name: Build Docker Image (ARM64)
        run: docker build -t docker.pkg.github.com/${{ github.repository_owner }}/${{ github.repository }}/my-image-arm64:latest .
        
      - name: Docker Login to GitHub Packages (ARM64)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.repository_owner }} --password-stdin

      - name: Push Docker Image to GitHub Packages (ARM64)
        run: docker push docker.pkg.github.com/${{ github.repository_owner }}/${{ github.repository }}/my-image-arm64:latest
